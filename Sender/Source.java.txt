import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.math.BigInteger;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.security.DigestInputStream;
import java.security.MessageDigest;
import java.sql.Connection;
import java.sql.Statement;

import javax.sound.sampled.AudioFormat.Encoding;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

public class Source implements ActionListener {
	public Font f = new Font("Times new roman", Font.BOLD, 35);
	public Font f1 = new Font(" Times new roman", Font.BOLD, 18);
	public Font f2 = new Font("Times new roman", Font.BOLD, 18);
	public Font f3 = new Font("Times new roman", Font.BOLD, 16);
	public JLabel T0 = new JLabel("Source");
	public JLabel T1 = new JLabel("Select the Method");
	public JLabel T2 = new JLabel("Select the File    :");
	public JLabel T3 = new JLabel("File Path            :");
	public JLabel T4 = new JLabel();
	public JLabel T5 = new JLabel("Select The Route");
	public JLabel T6 = new JLabel("FA    -Foriegn Agent");
	public JLabel T7 = new JLabel("GFA   -Gateway Foriegn Agent");

	public JCheckBox chk1 = new JCheckBox("");
	public JComboBox TAreu = new JComboBox();
	public JButton btn = new JButton("Submit");
	public JButton send = new JButton("Send Mac To All Nodes:");
	public JTextArea tf = new JTextArea();
	public JScrollPane pane = new JScrollPane();
	public JButton btn1 = new JButton("Browse");

	JLabel imageLabel = new JLabel();
	JLabel image = new JLabel();
	JLabel imageLabel1 = new JLabel();
	JLabel image1 = new JLabel();

	JLabel imageLabel2 = new JLabel();
	JLabel image12 = new JLabel();

	JPanel jp = new JPanel();
	JPanel jp1 = new JPanel();

	public JFrame jf;
	public Container c;
	
	String content="";
	String path="";
	String mac="";
	String file="";
	

	Source() {
		jf = new JFrame("Source");
		c = jf.getContentPane();
		c.setLayout(null);
		jf.setSize(1000, 670);
		// c.setBackground(Color.DARK_GRAY);

		c.setBackground(new Color(193, 222, 216));
		T0.setBounds(450, 30, 350, 45);
		T0.setFont(f);

		T0.setForeground(Color.RED);
		T2.setBounds(205, 150, 250, 45);
		T2.setFont(f2);
		T2.setForeground(Color.BLUE);

		T3.setBounds(205, 210, 250, 45);
		T3.setFont(f2);
		T3.setForeground(Color.BLUE);

		T4.setBounds(400, 210, 950, 45);
		T4.setFont(f2);
		T4.setForeground(new Color(120, 0, 0));

		T5.setBounds(660, 145, 300, 45);
		T5.setFont(f2);
		T5.setForeground(Color.CYAN);

		T6.setBounds(760, 70, 400, 35);
		T6.setFont(f2);
		T6.setForeground(Color.RED);

		T7.setBounds(760, 110, 400, 35);
		T7.setFont(f2);
		T7.setForeground(Color.MAGENTA);

		btn1.setBounds(590, 153, 150, 33);
		btn1.setFont(f2);
		// btn1.setBackground(Color.WHITE);
		btn1.setForeground(new Color(120, 0, 0));

		jp.setBounds(157, 126, 719, 450);
		jp.setBackground(new Color(227, 146, 87));
		// jp1.setBackground(new Color(120,0,0));
		jp1.setBounds(155, 124, 723, 453);

		T1.setBounds(300, 550, 250, 45);
		TAreu.setBounds(650, 550, 200, 35);
		btn.setBounds(600, 520, 150, 33);
		T1.setFont(f3);
		T1.setForeground(new Color(0, 120, 0));
		btn.setFont(f2);
		// btn.setBackground(Color.WHITE);
		btn.setForeground(new Color(120, 0, 0));
		
		send.setBounds(350,520,210,33);
		send.setFont(f2);
		send.setForeground(new Color(120,0,0));
		TAreu.addItem("Mesh Route");
		TAreu.addItem(" Node ");
		TAreu.setFont(f3);
		TAreu.setBackground(Color.WHITE);
		TAreu.setForeground(Color.BLUE);
		TAreu.setFont(f);
		pane.setBounds(385, 280, 400, 200);

		tf.setColumns(20);

		tf.setForeground(Color.MAGENTA);
		tf.setFont(f2);
		tf.setRows(10);
		tf.setName("tf");
		pane.setName("pane");
		pane.setViewportView(tf);

		btn1.addActionListener(this);
		btn.addActionListener(this);
		send.addActionListener(this);

		btn1.setMnemonic(KeyEvent.VK_B);
		btn.setMnemonic(KeyEvent.VK_S);
		jf.show();

		c.add(btn);
		c.add(send);
		c.add(T2);
		c.add(T3);
		c.add(T4);

		c.add(pane, BorderLayout.CENTER);
		c.add(btn1);
		c.add(T0);

		c.add(imageLabel1);

		c.add(jp);
		c.add(jp1);

		jf.addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent win) {
				System.exit(0);
			}
		});

	}

	public void actionPerformed(ActionEvent e) {
		// DataInputStream input;

		// BufferedInputStream bis;
		BufferedOutputStream bos = null;
		
		String str = "MobileTerminal,Foriegn Agent  A,Gateway FA  A";
		byte[] byteArray = str.getBytes();

		String strLine = null;
		if (e.getSource() == btn1) {

			JFileChooser chooser = new JFileChooser();

			try {

				File f = new File(new File("filename.txt").getCanonicalPath());

				chooser.setSelectedFile(f);
			} catch (IOException e1) {
			}

			chooser.showOpenDialog(btn1);
			int retval = chooser.showOpenDialog(btn1);

			if (retval == JFileChooser.APPROVE_OPTION) {
				File field = chooser.getSelectedFile();
				path=field.getAbsolutePath();
				file= field.getName();
				T4.setText(field.getAbsolutePath());
			}

			File curFile = chooser.getSelectedFile();
			try {

				FileInputStream fstream = new FileInputStream(curFile);

				DataInputStream ins = new DataInputStream(fstream);
				BufferedReader br = new BufferedReader(new InputStreamReader(
						ins));

				StringBuffer buffer = new StringBuffer();

				while ((strLine = br.readLine()) != null) {

					buffer.append(strLine + "\n");
				}
System.out.println(path);
				tf.setText(buffer.toString());
				
				content = tf.getText();
				PrintStream pout=new PrintStream(new FileOutputStream("sender\\"+file+".txt"));
				pout.print(content);
				pout.close();
				   MessageDigest md = MessageDigest.getInstance("SHA1");
				   FileInputStream in1 = new FileInputStream("sender\\"+file+".txt");
				   DigestInputStream dis2 = new DigestInputStream(in1, md);
				   BufferedInputStream bd = new BufferedInputStream(dis2);
				   
				   while (true) {
						int b2 = bd.read();
						if (b2 == -1)
							break;
					}
		 
					BigInteger bi2 = new BigInteger(md.digest());
					mac = bi2.toString(16);
					System.out.println(mac);
					
					Dbcon db = new Dbcon();
					Connection con = db.getConnection();
					Statement stmt = con.createStatement();
					String sql = "insert into sender values('"+file+"','"+mac+"')";
					stmt.executeUpdate(sql);

			} catch (Exception e1) {
				System.err.println("Error: " + e1.getMessage());
			}
			

		}
		if (e.getSource() == btn) {

//			String[] Reciever = { "Select", "Router1", "Router2", "Router3" };
//			String SReciever = (String) JOptionPane.showInputDialog(null,
//					"Select Router", "Select", JOptionPane.QUESTION_MESSAGE,
//					null, Reciever, Reciever[0]);
//
//			if (SReciever == "Router1") {

				String[] node1 = { "Select SReciever", "A", "B" };
				String Snode1 = (String) JOptionPane.showInputDialog(null,
						"Select Destination Node", "node",
						JOptionPane.QUESTION_MESSAGE, null, node1, node1[0]);

				String SIPA = JOptionPane.showInputDialog(null,
						"Enter the IPAddress", "IP Address", 1);

				Socket client = null;
				

				try { 
					System.out.println(Snode1);
					
					client = new Socket("localhost", 2001);
			DataOutputStream dos1 = new DataOutputStream(client.getOutputStream());
					
					
					dos1.writeUTF(file);
					dos1.writeUTF(content);
					dos1.writeUTF(mac);
					dos1.writeUTF(Snode1);
					
					System.out.println(Snode1);
			
		}
			catch(Exception ex) {ex.printStackTrace();
			 
			 }

			}
		
		if(e.getSource()==send)
		{
			try {
				Socket sp =new Socket("localhost",2000);
				DataOutputStream ds = new DataOutputStream(sp.getOutputStream());
				ds.writeUTF(mac);
				ds.writeUTF(file);
				
				
			} 
			catch(Exception e1)
			{
				e1.printStackTrace();
			}
			
			
		}
			
					}
				
			
		

	

	class PortListener implements Runnable {
	
		BufferedOutputStream bos = null;

		ServerSocket server;
		Socket con;
		BufferedReader br = null;
		int port;

		public PortListener(int port) {
			this.port = port;
		}

		@Override
		public void run() {
			
			
		}
	}

	public static void main(String args[]) {
		new Source();
	}
}
